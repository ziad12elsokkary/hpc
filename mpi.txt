#include <mpi.h>
#include <opencv2/opencv.hpp>
#include <vector>
#include <cmath>
#include <chrono>
#include <iostream>
#include <numeric>
#include <memory>

using namespace cv;
using namespace std;
using namespace std::chrono;

// ================== Forward Declarations ==================
struct ProcessingBuffers;
void visualizeResults(const Mat& input, const Mat& output,
    const ProcessingBuffers& buffers, int totalPixels,
    const vector<double>& timings);

// ================== Global Variables ==================
int originalScale = 100;
int equalizedScale = 100;
const int maxScalePercentage = 500;
Mat displayedOriginalHist, displayedEqualizedHist;
Mat globalOutputImage;

struct ProcessingBuffers {
    vector<int> hist;        // Size 256
    vector<float> prob;      // Size 256
    vector<float> cumProb;   // Size 256
    vector<uchar> intensityMap; // Size 256

    ProcessingBuffers() : hist(256, 0), prob(256, 0.0f),
        cumProb(256, 0.0f), intensityMap(256, 0) {}
} globalBuffers;

int globalTotalPixels = 0;
vector<double> globalTimings;

// ================== MPI Parallel Functions ==================
void mpiCalculateHistogram(Mat& image, ProcessingBuffers& buffers, double& elapsedTime, int rank, int num_procs) {
    auto start = high_resolution_clock::now();
    const int totalPixels = image.rows * image.cols;
    uchar* imgData = image.data;

    // Calculate chunk sizes
    int chunk_size = totalPixels / num_procs;
    int remainder = totalPixels % num_procs;
    vector<int> counts(num_procs, chunk_size);
    vector<int> displs(num_procs, 0);

    for (int i = 0; i < remainder; i++) counts[i]++;
    for (int i = 1; i < num_procs; i++) displs[i] = displs[i - 1] + counts[i - 1];

    // Scatter image chunks
    uchar* local_chunk = new uchar[counts[rank]];
    MPI_Scatterv(imgData, counts.data(), displs.data(), MPI_UNSIGNED_CHAR,
        local_chunk, counts[rank], MPI_UNSIGNED_CHAR, 0, MPI_COMM_WORLD);

    // Local histogram calculation
    vector<int> local_hist(256, 0);
    for (int i = 0; i < counts[rank]; i++)
        local_hist[local_chunk[i]]++;

    // Reduce histograms
    MPI_Reduce(local_hist.data(), buffers.hist.data(), 256, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    delete[] local_chunk;
    elapsedTime = duration_cast<microseconds>(high_resolution_clock::now() - start).count() / 1000.0;
}

void mpiApplyIntensityMap(Mat& image, ProcessingBuffers& buffers, double& elapsedTime, int rank, int num_procs) {
    auto start = high_resolution_clock::now();
    const int totalPixels = image.rows * image.cols;
    uchar* imgData = image.data;

    // Broadcast intensity map
    MPI_Bcast(buffers.intensityMap.data(), 256, MPI_UNSIGNED_CHAR, 0, MPI_COMM_WORLD);

    // Calculate chunk sizes
    int chunk_size = totalPixels / num_procs;
    int remainder = totalPixels % num_procs;
    vector<int> counts(num_procs, chunk_size);
    vector<int> displs(num_procs, 0);

    for (int i = 0; i < remainder; i++) counts[i]++;
    for (int i = 1; i < num_procs; i++) displs[i] = displs[i - 1] + counts[i - 1];

    // Scatter image chunks
    uchar* local_chunk = new uchar[counts[rank]];
    MPI_Scatterv(imgData, counts.data(), displs.data(), MPI_UNSIGNED_CHAR,
        local_chunk, counts[rank], MPI_UNSIGNED_CHAR, 0, MPI_COMM_WORLD);

    // Process local chunk
    for (int i = 0; i < counts[rank]; i++)
        local_chunk[i] = buffers.intensityMap[local_chunk[i]];

    // Gather processed chunks
    MPI_Gatherv(local_chunk, counts[rank], MPI_UNSIGNED_CHAR,
        imgData, counts.data(), displs.data(), MPI_UNSIGNED_CHAR,
        0, MPI_COMM_WORLD);

    delete[] local_chunk;
    elapsedTime = duration_cast<microseconds>(high_resolution_clock::now() - start).count() / 1000.0;
}

// ================== Visualization Functions ==================
Mat drawHistogram(const vector<int>& hist, const string& title, int totalPixels,
    float scaleFactor = 1.0f, const vector<double>& timings = {}) {
    const int histSize = hist.size();
    const int histWidth = 512, histHeight = 400;
    const int binWidth = cvRound(static_cast<double>(histWidth) / histSize);

    Mat histImg(histHeight, histWidth, CV_8UC3, Scalar(255, 255, 255));

    // Normalization with scaling
    float maxVal = 0.0f;
    vector<float> normalized(histSize);
    for (int i = 0; i < histSize; i++) {
        normalized[i] = static_cast<float>(hist[i]) / totalPixels;
        maxVal = max(maxVal, normalized[i]);
    }

    float displayMax = maxVal * scaleFactor;

    // Draw scaled bars
    for (int i = 0; i < histSize; i++) {
        float height = (normalized[i] / displayMax) * histHeight;
        height = min(height, static_cast<float>(histHeight));
        rectangle(histImg, Point(i * binWidth, histHeight - height),
            Point((i + 1) * binWidth, histHeight),
            Scalar(0, 0, 255), FILLED);
    }

    // Text overlay
    putText(histImg, title, Point(10, 30), FONT_HERSHEY_SIMPLEX, 0.7, Scalar(0, 0, 0), 2);
    stringstream scaleText;
    scaleText << "Scale: " << (scaleFactor * 100) << "%";
    putText(histImg, scaleText.str(), Point(histWidth - 150, 30),
        FONT_HERSHEY_SIMPLEX, 0.6, Scalar(0, 0, 0), 1);

    if (!timings.empty()) {
        stringstream timingText;
        timingText << "Processing Time: " << timings[4] << "ms";
        putText(histImg, timingText.str(), Point(10, 60),
            FONT_HERSHEY_SIMPLEX, 0.6, Scalar(0, 0, 0), 1);
    }

    return histImg;
}

void onOriginalTrackbar(int, void*) {
    float scaleFactor = originalScale / 100.0f;
    displayedOriginalHist = drawHistogram(globalBuffers.hist, "Original Histogram",
        globalTotalPixels, scaleFactor);
    imshow("Original Histogram", displayedOriginalHist);
}

void onEqualizedTrackbar(int, void*) {
    float scaleFactor = equalizedScale / 100.0f;
    vector<int> eqHist(256, 0);
    const uchar* outData = globalOutputImage.data;
    for (int i = 0; i < globalOutputImage.rows * globalOutputImage.cols; i++) {
        eqHist[outData[i]]++;
    }
    displayedEqualizedHist = drawHistogram(eqHist, "Equalized Histogram",
        globalTotalPixels, scaleFactor, globalTimings);
    imshow("Equalized Histogram", displayedEqualizedHist);
}

void visualizeResults(const Mat& input, const Mat& output,
    const ProcessingBuffers& buffers, int totalPixels,
    const vector<double>& timings) {

    // Store values for callback access
    globalBuffers = buffers;
    globalTotalPixels = totalPixels;
    globalTimings = timings;
    globalOutputImage = output.clone();

    // Create control windows
    namedWindow("Original Histogram", WINDOW_AUTOSIZE);
    namedWindow("Equalized Histogram", WINDOW_AUTOSIZE);

    // Add trackbars to both windows
    createTrackbar("Zoom:", "Original Histogram", &originalScale,
        maxScalePercentage, onOriginalTrackbar);
    createTrackbar("Zoom:", "Equalized Histogram", &equalizedScale,
        maxScalePercentage, onEqualizedTrackbar);

    // Initial display
    onOriginalTrackbar(0, 0);
    onEqualizedTrackbar(0, 0);

    // Combine images
    Mat combined(input.rows, input.cols * 2, CV_8UC3);
    cvtColor(input, combined(Rect(0, 0, input.cols, input.rows)), COLOR_GRAY2BGR);
    cvtColor(output, combined(Rect(input.cols, 0, output.cols, output.rows)), COLOR_GRAY2BGR);
    imshow("Input vs Equalized", combined);
}

// ================== Main Function ==================
int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, num_procs;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);

    Mat inputImage, outputImage;
    ProcessingBuffers buffers;
    vector<double> timings;
    int rows = 0, cols = 0, totalPixels = 0;

    if (rank == 0) {
        inputImage = imread("input.jpg", IMREAD_GRAYSCALE);
        if (inputImage.empty()) {
            cerr << "Error: Could not read image!" << endl;
            MPI_Abort(MPI_COMM_WORLD, 1);
        }
        rows = inputImage.rows;
        cols = inputImage.cols;
        totalPixels = rows * cols;
        outputImage = inputImage.clone();
    }

    // Broadcast image dimensions
    MPI_Bcast(&rows, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&cols, 1, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(&totalPixels, 1, MPI_INT, 0, MPI_COMM_WORLD);

    auto totalStart = high_resolution_clock::now();
    double stepTime;

    // 1. Parallel Histogram Calculation
    if (rank == 0) {
        mpiCalculateHistogram(inputImage, buffers, stepTime, rank, num_procs);
        timings.push_back(stepTime);
    }
    else {
        Mat dummy(rows, cols, CV_8UC1);
        mpiCalculateHistogram(dummy, buffers, stepTime, rank, num_procs);
    }

    // 2-4. Sequential Operations on Root
    if (rank == 0) {
        // 2. Probability Calculation
        auto start = high_resolution_clock::now();
        for (int i = 0; i < 256; i++)
            buffers.prob[i] = static_cast<float>(buffers.hist[i]) / totalPixels;
        timings.push_back(duration_cast<microseconds>(high_resolution_clock::now() - start).count() / 1000.0);

        // 3. Cumulative Probability
        start = high_resolution_clock::now();
        buffers.cumProb[0] = buffers.prob[0];
        for (int i = 1; i < 256; i++)
            buffers.cumProb[i] = buffers.cumProb[i - 1] + buffers.prob[i];
        timings.push_back(duration_cast<microseconds>(high_resolution_clock::now() - start).count() / 1000.0);

        // 4. Intensity Mapping
        start = high_resolution_clock::now();
        for (int i = 0; i < 256; i++)
            buffers.intensityMap[i] = saturate_cast<uchar>(floor(buffers.cumProb[i] * 255));
        timings.push_back(duration_cast<microseconds>(high_resolution_clock::now() - start).count() / 1000.0);
    }

    // 5. Parallel Transformation
    if (rank == 0) {
        mpiApplyIntensityMap(outputImage, buffers, stepTime, rank, num_procs);
        timings.push_back(stepTime);
    }
    else {
        Mat dummy(rows, cols, CV_8UC1);
        mpiApplyIntensityMap(dummy, buffers, stepTime, rank, num_procs);
    }

    if (rank == 0) {
        auto totalStop = high_resolution_clock::now();
        double totalTime = duration_cast<microseconds>(totalStop - totalStart).count() / 1000.0;

        // Output results
        cout << fixed << setprecision(3);
        cout << "\n=== Execution Times ===" << endl;
        cout << "1. Histogram:      " << timings[0] << " ms" << endl;
        cout << "2. Probabilities:  " << timings[1] << " ms" << endl;
        cout << "3. Cumulative:     " << timings[2] << " ms" << endl;
        cout << "4. Intensity Map:  " << timings[3] << " ms" << endl;
        cout << "5. Transformation: " << timings[4] << " ms" << endl;
        cout << "-----------------------" << endl;
        cout << "Total Time:        " << totalTime << " ms" << endl;
        cout << "Image Size:        " << cols << "x" << rows << endl;

        // Save and visualize
        imwrite("equalized.jpg", outputImage);
        visualizeResults(inputImage, outputImage, buffers, totalPixels, timings);
        waitKey(0);
    }

    MPI_Finalize();
    return 0;
}